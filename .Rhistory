names(Auto)
plot(mpg01, cylinders)
plot(mpg01, cylinders, type='Box')
plot(mpg01, cylinders, type='box')
boxplot(mpg01~cylinders)
boxplot(cylinders~mpg01)
boxplot(cylinders~mpg01)
names(Auto)
boxplot(displacement~mpg01)
cor(Auto)
names(df.Auto)
cor(df.Auto[,-9])
pairs(df.Auto[,-9])
names(df.Auto)
boxplot(cylinders~mpg01)
boxplot(displacement~mpg01)
boxplot(horsepower~mpg01)
boxplot(weight~mpg01)
boxplot(acceleration~mpg01)
boxplot(year~mpg01)
boxplot(origin~mpg01)
nrow(df.Auto)
df.Auto
df.Auto
15/2
15//2
round(15/2)
n.obs = nrow(df.Auto)
train = sample( n.obs, round(n.obs/2) )
length(unique(train))
lda.fit = lda(mpg01~cylinders+displacement+horsepower+weight, data=Auto.train)
n.obs = nrow(df.Auto)
train = sample( n.obs, round(n.obs/2) )
Auto.train = df.Auto[train, ]
Auto.test = df.Auto[!train, ]
lda.fit = lda(mpg01~cylinders+displacement+horsepower+weight, data=Auto.train)
lda.pred = predict( lda.fit, newdata=Auto.test, type='response' )
lda.pred = predict( lda.fit, newdata=Auto.test, type='response' )$class
lda.pred = predict( lda.fit, newdata=Auto.test)$class
lda.pred
n.obs = nrow(df.Auto)
train = sample( n.obs, round(n.obs/2) )
Auto.train = df.Auto[train, ]
Auto.test = df.Auto[!train, ]
lda.fit = lda(mpg01~cylinders+displacement+horsepower+weight, data=Auto.train)
lda.pred = predict( lda.fit, newdata=Auto.test )$class
lda.pred = predict(lda.fit, newdata=Auto.test)$class
lda.pred
Auto.train
Auto.test = df.Auto[-train, ]
lda.fit = lda(mpg01~cylinders+displacement+horsepower+weight, data=Auto.train)
lda.pred = predict(lda.fit, newdata=Auto.test)$class
table(lda.pred, Auto.test$mpg01)
mean(lda.pred==Auto.test$mpg01)
qda.fit = qda(mpg01~cylinders+displacement+horsepower+weight, data=Auto.train)
qda.pred = predict(qda.fit, newdata=Auto.test)$class
table(qda.pred, Auto.test$mpg01)
mean(qda.pred==Auto.test$mpg01)
lda.fit = lda(mpg01~cylinders+displacement+horsepower+weight, data=Auto.train)
lda.pred = predict(lda.fit, newdata=Auto.test)$class
table(lda.pred, Auto.test$mpg01)
mean(lda.pred!=Auto.test$mpg01)
mean(qda.pred!=Auto.test$mpg01)
glm.fit = glm(mpg01~cylinders+displacement+horsepower+weight, data=Auto.train, type=binomial)
glm.prob = predict(glm.fit, newdata=Auto.test, type='response')
glm.pred = rep(0, nrow(Auto.test))
table(glm.pred, Auto.test$mpg01)
mean(glm.pred!=Auto.test$mpg01)
glm.fit = glm(mpg01~cylinders+displacement+horsepower+weight, data=Auto.train, type=binomial)
glm.prob = predict(glm.fit, newdata=Auto.test, type='response')
glm.pred = rep(0, nrow(Auto.test))
table(glm.pred, Auto.test$mpg01)
mean(glm.pred!=Auto.test$mpg01)
glm.fit = glm(mpg01~cylinders+displacement+horsepower+weight, data=Auto.train, family=binomial)
glm.fit = glm(mpg01~cylinders+displacement+horsepower+weight, data=Auto.train, family=binomial)
glm.prob = predict(glm.fit, newdata=Auto.test, type='response')
glm.pred = rep(0, nrow(Auto.test))
table(glm.pred, Auto.test$mpg01)
mean(glm.pred!=Auto.test$mpg01)
glm.pred
mean(glm.pred!=Auto.test$mpg01)
glm.fit = glm(mpg01~cylinders+displacement+horsepower+weight, data=Auto.train, family=binomial)
glm.prob = predict(glm.fit, newdata=Auto.test, type='response')
glm.pred = rep(0, nrow(Auto.test))
glm.pred[ glm.prob >= 0.5 ] = 1
table(glm.pred, Auto.test$mpg01)
mean(glm.pred!=Auto.test$mpg01)
library(class)
train.X = cbind(Auto.train$cylinders, Auto.train$displacement, Auto.train$horsepower, Auto.train$weight)
test.X = cbind(Auto.test$cylinders, Auto.test$displacement, Auto.test$horsepower, Auto.test$weight)
set.seed(1)
knn.pred = knn(train.X, test.X, Auto.train$mpg01, k=1)
set.seed(1)
knn.pred = knn(train.X, test.X, Auto.train$mpg01, k=3)
set.seed(1)
knn.pred = knn(train.X, test.X, Auto.train$mpg01, k=5)
train.X = cbind(Auto.train$cylinders, Auto.train$displacement, Auto.train$horsepower, Auto.train$weight)
test.X = cbind(Auto.test$cylinders, Auto.test$displacement, Auto.test$horsepower, Auto.test$weight)
set.seed(1)
knn.pred = knn(train.X, test.X, Auto.train$mpg01, k=1)
table(knn.pred, Auto.test$mpg01)
mean(knn.pred!=Auto.test$mpg01)
set.seed(1)
knn.pred = knn(train.X, test.X, Auto.train$mpg01, k=3)
table(knn.pred, Auto.test$mpg01)
mean(knn.pred!=Auto.test$mpg01)
set.seed(1)
knn.pred = knn(train.X, test.X, Auto.train$mpg01, k=5)
table(knn.pred, Auto.test$mpg01)
mean(knn.pred!=Auto.test$mpg01)
Power <- function(){
print(2^3)
}
Power <- function(){
print(2^3)
}
Power()
Power2 <- function(x, a){
print(x^a)
}
Power2(3, 8)
Power2(10, 3)
Power2(8, 17)
Power2(131, 3)
Power3 <- function(x, a){ return( x^a ) }
x = 1:10
y = Power3(x)
y = Power3(x, 2)
x = 1:10
y = Power3(x, 2)
plot(x, y, log='y')
PlotPower <- function(x, a){
y = Power2(x, a)
plot(x, y)
}
PlotPower(1:10, 3)
?Boston
names(Boston)
library(MASS)
attach(Boston)
crim.med = median(crim)
crim01 = rep(0, nrow(Boston))
crim01[ crim >= crim.med ] = 1
df.Boston = data.frame(Boston, crim01)
pairs(df.Boston)
names(Boston)
cor(df.Boston)
names(Boston)
cor(df.Boston)
pairs(df.Boston)
boxplot(zn~crim01, main='zn')
boxplot(indus~crim01, main='indus')
boxplot(chas~crim01, main='chas')
boxplot(nox~crim01, main='nox')
boxplot(rm~crim01, main='rm')
boxplot(age~crim01, main='age')
boxplot(dis~crim01, main='dis')
boxplot(rad~crim01, main='rad')
boxplot(tax~crim01, main='tax')
boxplot(ptratio~crim01, main='ptratio')
boxplot(black~crim01, main='black')
boxplot(lstat~crim01, main='lstat')
boxplot(medv~crim01, main='medv')
glm.fit = glm(crim01~.-crim, data=Boston.train, family=binomial)
glm.prob = predict(glm.fit, newdata=Boston.test, type='response')
glm.pred = rep(0, nrow(Boston.test))
glm.pred[ glm.prob >= 0.5 ] = 1
table(glm.pred, Boston.test$crim01)
mean(glm.pred!=Boston.test$crim01)
n.obs = nrow(df.Boston)
train = sample(n.obs, round(n.obs/2))
Boston.train = df.Boston[train, ]
Boston.test = df.Boston[-train, ]
glm.fit = glm(crim01~.-crim, data=Boston.train, family=binomial)
glm.prob = predict(glm.fit, newdata=Boston.test, type='response')
glm.pred = rep(0, nrow(Boston.test))
glm.pred[ glm.prob >= 0.5 ] = 1
table(glm.pred, Boston.test$crim01)
mean(glm.pred!=Boston.test$crim01)
lda.fit = lda(crim01~.-crim, data=Boston.train)
lda.pred = predict(lda.fit, newdata=Boston.test)
table(lda.pred, Boston.test$crim01)
mean(lda.pred!=Boston.test$crim01)
glm.fit = glm(crim01~.-crim, data=Boston.train, family=binomial)
glm.prob = predict(glm.fit, newdata=Boston.test, type='response')
glm.pred = rep(0, nrow(Boston.test))
glm.pred[ glm.prob >= 0.5 ] = 1
table(glm.pred, Boston.test$crim01)
mean(glm.pred!=Boston.test$crim01)
lda.fit = lda(crim01~.-crim, data=Boston.train)
lda.pred = predict(lda.fit, newdata=Boston.test)$class
table(lda.pred, Boston.test$crim01)
mean(lda.pred!=Boston.test$crim01)
qda.fit = qda(crim01~.-crim, data=Boston.train)
qda.pred = predict(qda.fit, newdata=Boston.test)$class
table(qda.pred, Boston.test$crim01)
mean(qda.pred!=Boston.test$crim01)
train.X = cbind(Boston.train[, -c(crim, crim01)])
dim(train.X)
Boston.train[, -c(crim, crim01)]
dim(Boston.train[, -c(crim, crim01)])
train.X = Boston[, -1][train, ]
train.X = cbind( Boston[, -1][train, ] )
train.X = cbind( Boston[, -1][train, ] )
typeof(train.X)
class(train.X)
train.X = data.matrix(Boston[, -1][train, ])
train.X = data.matrix(Boston[, -1][train, ])
test.X = data.matrix(Boston[, -1][-train, ])
knn.pred1 = knn(train.X, test.X, Boston.test$crim01, k=1)
table(knn.pred1, Boston.test$crim01)
mean(knn.pred1 != Boston.test$crim01)
train.X = data.matrix(Boston[, -1][train, ])
test.X = data.matrix(Boston[, -1][-train, ])
knn.pred1 = knn(train.X, test.X, Boston.test$crim01, k=1)
table(knn.pred1, Boston.test$crim01)
mean(knn.pred1 != Boston.test$crim01)
# test error rate is 51.0%
mean(qda.pred!=Boston.test$crim01)
knn.pred3 = knn(train.X, test.X, Boston.test$crim01, k=3)
table(knn.pred3, Boston.test$crim01)
mean(knn.pred3 != Boston.test$crim01)
knn.pred5 = knn(train.X, test.X, Boston.test$crim01, k=5)
table(knn.pred5, Boston.test$crim01)
mean(knn.pred5 != Boston.test$crim01)
knn.pred10 = knn(train.X, test.X, Boston.test$crim01, k=10)
table(knn.pred10, Boston.test$crim01)
mean(knn.pred10 != Boston.test$crim01)
train.X = data.matrix(Boston[, -1][train, ])
test.X = data.matrix(Boston[, -1][-train, ])
set.seed(1)
knn.pred1 = knn(train.X, test.X, Boston.test$crim01, k=1)
table(knn.pred1, Boston.test$crim01)
mean(knn.pred1 != Boston.test$crim01)
# test error rate is 51.0%
set.seed(1)
knn.pred3 = knn(train.X, test.X, Boston.test$crim01, k=3)
table(knn.pred3, Boston.test$crim01)
mean(knn.pred3 != Boston.test$crim01)
# test error rate is 50.2%
set.seed(1)
knn.pred5 = knn(train.X, test.X, Boston.test$crim01, k=5)
table(knn.pred5, Boston.test$crim01)
mean(knn.pred5 != Boston.test$crim01)
# test error rate is 50.2%
set.seed(1)
knn.pred10 = knn(train.X, test.X, Boston.test$crim01, k=10)
table(knn.pred10, Boston.test$crim01)
mean(knn.pred10 != Boston.test$crim01)
# test error rate is 51.8%
set.seed(1)
knn.pred1 = knn(train.X, test.X, Boston.test$crim01, k=1)
table(knn.pred1, Boston.test$crim01)
mean(knn.pred1 != Boston.test$crim01)
set.seed(1)
knn.pred3 = knn(train.X, test.X, Boston.test$crim01, k=3)
table(knn.pred3, Boston.test$crim01)
mean(knn.pred3 != Boston.test$crim01)
# ---- split ----
n.obs = nrow(df.Boston)
train = sample(n.obs, round(n.obs*2/3))
Boston.train = df.Boston[train, ]
Boston.test = df.Boston[-train, ]
# ---- logistic ----
glm.fit = glm(crim01~.-crim, data=Boston.train, family=binomial)
glm.prob = predict(glm.fit, newdata=Boston.test, type='response')
glm.pred = rep(0, nrow(Boston.test))
glm.pred[ glm.prob >= 0.5 ] = 1
table(glm.pred, Boston.test$crim01)
mean(glm.pred!=Boston.test$crim01)
# test error rate is 9.5%
# ---- lda ----
lda.fit = lda(crim01~.-crim, data=Boston.train)
lda.pred = predict(lda.fit, newdata=Boston.test)$class
table(lda.pred, Boston.test$crim01)
mean(lda.pred!=Boston.test$crim01)
# test error rate is 13.0%
# ---- qda ----
qda.fit = qda(crim01~.-crim, data=Boston.train)
qda.pred = predict(qda.fit, newdata=Boston.test)$class
table(qda.pred, Boston.test$crim01)
mean(qda.pred!=Boston.test$crim01)
# test error rate is 9.9%
# ---- knn ----
train.X = data.matrix(Boston[, -1][train, ])
test.X = data.matrix(Boston[, -1][-train, ])
set.seed(1)
knn.pred1 = knn(train.X, test.X, Boston.test$crim01, k=1)
table(knn.pred1, Boston.test$crim01)
mean(knn.pred1 != Boston.test$crim01)
# test error rate is 51.0%
set.seed(1)
knn.pred3 = knn(train.X, test.X, Boston.test$crim01, k=3)
table(knn.pred3, Boston.test$crim01)
mean(knn.pred3 != Boston.test$crim01)
# test error rate is 50.6%
set.seed(1)
knn.pred5 = knn(train.X, test.X, Boston.test$crim01, k=5)
table(knn.pred5, Boston.test$crim01)
mean(knn.pred5 != Boston.test$crim01)
# test error rate is 50.2%
set.seed(1)
knn.pred10 = knn(train.X, test.X, Boston.test$crim01, k=10)
table(knn.pred10, Boston.test$crim01)
mean(knn.pred10 != Boston.test$crim01)
# test error rate is 51.8%
n.obs = nrow(df.Boston)
train = sample(n.obs, round(n.obs*2/3))
Boston.train = df.Boston[train, ]
Boston.test = df.Boston[-train, ]
# ---- logistic ----
glm.fit = glm(crim01~.-crim, data=Boston.train, family=binomial)
glm.prob = predict(glm.fit, newdata=Boston.test, type='response')
glm.pred = rep(0, nrow(Boston.test))
glm.pred[ glm.prob >= 0.5 ] = 1
table(glm.pred, Boston.test$crim01)
mean(glm.pred!=Boston.test$crim01)
# ---- lda ----
lda.fit = lda(crim01~.-crim, data=Boston.train)
lda.pred = predict(lda.fit, newdata=Boston.test)$class
table(lda.pred, Boston.test$crim01)
mean(lda.pred!=Boston.test$crim01)
# ---- qda ----
qda.fit = qda(crim01~.-crim, data=Boston.train)
qda.pred = predict(qda.fit, newdata=Boston.test)$class
table(qda.pred, Boston.test$crim01)
mean(qda.pred!=Boston.test$crim01)
train.X = data.matrix(Boston[, -1][train, ])
test.X = data.matrix(Boston[, -1][-train, ])
set.seed(1)
knn.pred1 = knn(train.X, test.X, Boston.train$crim01, k=1)
table(knn.pred1, Boston.test$crim01)
mean(knn.pred1 != Boston.test$crim01)
set.seed(1)
knn.pred3 = knn(train.X, test.X, Boston.train$crim01, k=3)
table(knn.pred3, Boston.test$crim01)
mean(knn.pred3 != Boston.test$crim01)
set.seed(1)
knn.pred5 = knn(train.X, test.X, Boston.train$crim01, k=5)
table(knn.pred5, Boston.test$crim01)
mean(knn.pred5 != Boston.test$crim01)
set.seed(1)
knn.pred10 = knn(train.X, test.X, Boston.train$crim01, k=10)
table(knn.pred10, Boston.test$crim01)
mean(knn.pred10 != Boston.test$crim01)
attach(Auto)
library(ISLR)
attach(Auto)
dim(Auto)
n.obs = dim(Auto)[1]
train = sample(n.obs, round(n.obs/2) )
lm.fit = lm(mpg~horsepower, data=Auto, subset=train)
lm.pred = predict(lm.fit, newdata=Auto)
mse = mean( (lm.pred - mpg)[-train]^2 )
source('C:/Users/Penghao Chen/Desktop/R/ISLR/RLab/Ch5.R', echo=TRUE)
source('C:/Users/Penghao Chen/Desktop/R/ISLR/RLab/Ch5.R', echo=TRUE)
source('C:/Users/Penghao Chen/Desktop/R/ISLR/RLab/Ch5.R', echo=TRUE)
source('C:/Users/Penghao Chen/Desktop/R/ISLR/RLab/Ch5.R', echo=TRUE)
# ************* 5.3.1 *************
library(ISLR)
attach(Auto)
set.seed(1)
n.obs = dim(Auto)[1]
train = sample(n.obs, round(n.obs/2) )
lm.fit = lm(mpg~horsepower, data=Auto, subset=train)
lm.pred = predict(lm.fit, newdata=Auto)
mse = mean( (lm.pred - mpg)[-train]^2 )
lm.fit2 = lm(mpg~poly(horsepower, 2), data=Auto, subset=train)
lm.pred2 = predict(lm.fit2, newdata=Auto)
mse2 = mean( (lm.pred2 - mpg)[-train]^2 )
lm.fit3 = lm(mpg~poly(horsepower, 3), data=Auto, subset=train)
lm.pred3 = predict(lm.fit3, newdata=Auto)
mse3 = mean( (lm.pred3 - mpg)[-train]^2 )
glm.fit = lm(mpg~horsepower, data=Auto)
coef(glm.fit)
library(boot)
glm.fit = lm(mpg~horsepower, data=Auto)
cv.err = cv.glm(Auto, glm.fit)
cv.err$delta
glm.fit = glm(mpg~horsepower, data=Auto)
cv.err = cv.glm(Auto, glm.fit)
cv.err$delta
cv.error = rep(0, 5)
for (i in 1:5) {
glm.fit = glm(mpg~poly(horsepower, i), data=Auto)
cv.error[i] = cv.glm(Auto, glm.fit)
}
cv.error = rep(0, 5)
for (i in 1:5) {
glm.fit = glm(mpg~poly(horsepower, i), data=Auto)
cv.error[i] = cv.glm(Auto, glm.fit)$delta[1]
}
cv.error
set.seed(1)
cv.error.10 = rep(0, 10)
for (i in 1:10) {
glm.fit = glm(mpg~ploy(horsepower, i), data=Auto)
cv.error.10[i] = cv.glm(Auto, glm.fit, K=10)$delta[1]
}
set.seed(1)
cv.error.10 = rep(0, 10)
for (i in 1:10) {
glm.fit = glm(mpg~poly(horsepower, i), data=Auto)
cv.error.10[i] = cv.glm(Auto, glm.fit, K=10)$delta[1]
}
cv.error.10
Portfolio
names(Portfolio)
Portfolio$X[1:10]
Portfolio$Y[1:10]
?Portfolio
alpha.fn(data, index) {
X = data$X[index]
Y = data$Y[index]
return( (var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X, Y)) )
}
alpha.fn(Portfolio, 1:100)
alpha.fn(data, index) {
X = data$X[index]
Y = data$Y[index]
return( (var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X, Y)) )
}
alpha.fn = function(data, index) {
X = data$X[index]
Y = data$Y[index]
return( (var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X, Y)) )
}
alpha.fn(Portfolio, 1:100)
alpha.fn(Portfolio, 1:100)
set.seed(1)
sample1 = sample(100, 100, replace=T)
alpha.fn(Portfolio, sample1)
dim(Portfolio)
boot(Portfolio, alpha.fn, R=1000)
boot.fn = function(data, index){
return( coef(lm(mpg~horsepower, data=data, subset=index)) )
}
boot.fn(Auto, 1:dim(Auto)[1])
set.seed(1)
sample1 = sample(n.obs, n.obs, replace=T)
boot.fn(Auto, sample1)
sample1 = sample(n.obs, n.obs, replace=T)
boot.fn(Auto, sample1)
boot(Auto, boot.fn, R=1000)
lm.fit = lm(mpg~horsepower, data=Auto)
summary(lm.fit)
boot.fn2 = function(data, index) {
return( coef(lm(mpg~poly(horsepower, 2), data=Auto)) )
}
boot(Auto, boot.fn2, R=1000)
lm.fit2 = lm(mpg~poly(horsepower,2), data=Auto)
summary(lm.fit2)
boot.fn2 = function(data, index) {
return( coef(lm(mpg~poly(horsepower, 2), data=Auto, subset=index)) )
}
boot(Auto, boot.fn2, R=1000)
lm.fit2 = lm(mpg~poly(horsepower,2), data=Auto)
summary(lm.fit2)
boot.fn2 = function(data, index) {
return( coef(lm(mpg~poly(horsepower, 2), data=Auto, subset=index)) )
}
set.seed(1)
boot(Auto, boot.fn2, R=1000)
lm.fit2 = lm(mpg~poly(horsepower,2), data=Auto)
summary(lm.fit2)
boot.fn2 = function(data, index) {
return( coef(lm(mpg~poly(horsepower, 2), data=data, subset=index)) )
}
set.seed(1)
boot(Auto, boot.fn2, R=1000)
poly(horsepower, 2)
lm.fit2 = lm(mpg~poly(horsepower,2), data=Auto)
summary(lm.fit2)
boot.fn2 = function(data, index) {
return( coef(lm(mpg~poly(horsepower, 2, raw=T), data=data, subset=index)) )
}
set.seed(1)
boot(Auto, boot.fn2, R=1000)
lm.fit2 = lm(mpg~poly(horsepower,2, raw=T), data=Auto)
summary(lm.fit2)
poly(1:10, 2)
poly(1:10, 2, raw=T)
# ************* Quetion 2 *************
# (g)
x = 1:1e5
y = 1 - (1-1/x)^x
y[100000]
plot(x, y)
plot(x, y, ylim=c(0, 1))
rec = rep(NA, 1e4)
for (i in 1:1e4){
rec[i] = sum(sample(100, replace=T) == 4) > 0
}
mean(rec[i])
set.seed(1)
rec = rep(NA, 1e4)
for (i in 1:1e4){
rec[i] = sum(sample(100, replace=T) == 4) > 0
}
mean(rec[i])
set.seed(1)
rec = rep(NA, 1e4)
for (i in 1:1e4){
rec[i] = sum(sample(1:100, replace=T) == 4) > 0
}
mean(rec[i])
set.seed(1)
rec = rep(NA, 1e4)
for (i in 1:1e4){
rec[i] = sum(sample(1:100, replace=T) == 4) > 0
}
mean(rec)
