source('C:/Users/Penghao Chen/Desktop/R/ISLR/Exerciese/Ch4/Ch4.R', echo=TRUE)
qda.fit = qda(Direction~.-Year-Today, data=Weekly.train)
library(MASS)
qda.fit = qda(Direction~.-Year-Today, data=Weekly.train)
qda.pred = predict(qda.fit, data=Weekly.test)
table(qda.pred, Weekly.test$Direction)
Weekly.test$Direction
qda.pred
qda.pred = predict(qda.fit, data=Weekly.test)$class
table(qda.pred, Weekly.test$Direction)
length(qda.pred)
qda.pred = predict(qda.fit, newdata=Weekly.test)$class
table(qda.pred, Weekly.test$Direction)
mean(qda.pred == Weekly.test$Direction)
mean(glm.pred == Weekly.test$Direction)
mean(qda.pred == Weekly.test$Direction)
dim(qda.fit)
qda.fit
mean(glm.pred == Weekly.test$Direction)
train = (Year <= 2008)
Weekly.train = Weekly[train, ]
Weekly.test = Weekly[!train, ]
glm.fit = glm(Direction~.-Year-Today, subset=train, family=binomial )
glm.prob = predict(glm.fit, newdata=Weekly.test, type='response')
glm.pred = rep('Up', nrow(Weekly.test))
glm.pred[ glm.prob < 0.5 ] = 'Down'
table(glm.pred, Weekly.test$Direction)
mean(glm.pred == Weekly.test$Direction)
glm.fit = glm(Direction~.-Year-Today, data=Weekly, subset=train, family=binomial )
glm.prob = predict(glm.fit, newdata=Weekly.test, type='response')
glm.pred = rep('Up', nrow(Weekly.test))
glm.pred[ glm.prob < 0.5 ] = 'Down'
table(glm.pred, Weekly.test$Direction)
mean(glm.pred == Weekly.test$Direction)
train = (Year <= 2008)
Weekly.train = Weekly[train, ]
Weekly.test = Weekly[!train, ]
glm.fit = glm(Direction~.-Year-Today, data=Weekly.train, family=binomial )
glm.prob = predict(glm.fit, newdata=Weekly.test, type='response')
glm.pred = rep('Up', nrow(Weekly.test))
glm.pred[ glm.prob < 0.5 ] = 'Down'
table(glm.pred, Weekly.test$Direction)
mean(glm.pred == Weekly.test$Direction)
lda.fit = lda(Direction~.-Year-Today, data=Weekly.train, family=binomial)
lda.pred = predict(lda.fit, newdata=Weekly.test)$class
table(lda.pred, Weekly.test$Direction)
mean(lda.pred==Weekly.test$Direction)
qda.fit = qda(Direction~.-Year-Today, data=Weekly.train)
qda.pred = predict(qda.fit, newdata=Weekly.test)$class
table(qda.pred, Weekly.test$Direction)
mean(qda.pred == Weekly.test$Direction)
train = (Year <= 2008)
Weekly.train = Weekly[train, ]
Weekly.test = Weekly[!train, ]
glm.fit = glm(Direction~.Lag2, data=Weekly.train, family=binomial )
glm.prob = predict(glm.fit, newdata=Weekly.test, type='response')
glm.pred = rep('Up', nrow(Weekly.test))
glm.pred[ glm.prob < 0.5 ] = 'Down'
table(glm.pred, Weekly.test$Direction)
mean(glm.pred == Weekly.test$Direction)
# ---- (d) ----
train = (Year <= 2008)
Weekly.train = Weekly[train, ]
Weekly.test = Weekly[!train, ]
glm.fit = glm(Direction~Lag2, data=Weekly.train, family=binomial )
glm.prob = predict(glm.fit, newdata=Weekly.test, type='response')
glm.pred = rep('Up', nrow(Weekly.test))
glm.pred[ glm.prob < 0.5 ] = 'Down'
table(glm.pred, Weekly.test$Direction)
mean(glm.pred == Weekly.test$Direction)
library(MASS)
lda.fit = lda(Direction~Lag2, data=Weekly.train, family=binomial)
lda.pred = predict(lda.fit, newdata=Weekly.test)$class
table(lda.pred, Weekly.test$Direction)
mean(lda.pred==Weekly.test$Direction)
# ---- (f) ----
qda.fit = qda(Direction~Lag2, data=Weekly.train)
qda.pred = predict(qda.fit, newdata=Weekly.test)$class
table(qda.pred, Weekly.test$Direction)
mean(qda.pred == Weekly.test$Direction)
?knn
library(class)
?knn
library(class)
knn.pred = knn(Weekly.train, Weekly.test, Weekly.test$Direction, k=1)
table(knn.pred, Weekly.test$Direction)
mean(knn.pred==Weekly.test$Direction)
library(class)
knn.pred = knn(Weekly.train, Weekly.test, Weekly.test$Direction, k=1)
knn.pred = knn(Weekly.train, Weekly.test, Weekly.train$Direction, k=1)
library(class)
set.seed(1)
knn.pred = knn(Weekly.train, Weekly.test, Weekly.train$Direction, k=1)
table(knn.pred, Weekly.test$Direction)
mean(knn.pred==Weekly.test$Direction)
set.seed(1)
knn.pred = knn(Weekly.train, Weekly.test, Weekly.train$Direction, k=1)
Weekly.train$Direction
length(Weekly.train$Direction)
knn.pred
knn.pred = knn(Weekly.train$Lag2, Weekly.test$Lag2, Weekly.train$Direction, k=1)
dim(Weekly.train$Lag2)
source('C:/Users/Penghao Chen/Desktop/R/ISLR/RLab/Ch4.R', echo=TRUE)
train.X
typeof(train.X)
class(train.X)
dim(train.X)
library(class)
train.X = cbind(Lag1, Lag2)[train, ]
test.X = cbind(Lag1, Lag2)[!train, ]
train.Direction = Direction[train]
dim(train.X)
a = cbind(Weekly.train$Lag2)
train = (Year <= 2008)
Weekly.train = Weekly[train, ]
Weekly.test = Weekly[!train, ]
# **************** Question 10 ****************
library(ISLR)
attach(Weekly)
# ---- (d) ----
train = (Year <= 2008)
Weekly.train = Weekly[train, ]
Weekly.test = Weekly[!train, ]
a = cbind(Weekly.train$Lag2)
dim(a)
dim(Weekly.train$Lag2)
knn.pred = knn(train.X, test.X, Weekly.train$Direction, k=1)
source('C:/Users/Penghao Chen/Desktop/R/ISLR/RLab/Ch4.R', echo=TRUE)
library(class)
train.X = cbind(Lag1, Lag2)[train, ]
test.X = cbind(Lag1, Lag2)[!train, ]
train.Direction = Direction[train]
dim(train.Direction)
source('C:/Users/Penghao Chen/Desktop/R/ISLR/Exerciese/Ch4/Ch4.R', echo=TRUE)
source('C:/Users/Penghao Chen/Desktop/R/ISLR/Exerciese/Ch4/Ch4.R', echo=TRUE)
source('C:/Users/Penghao Chen/Desktop/R/ISLR/Exerciese/Ch4/Ch4.R', echo=TRUE)
set.seed(1)
train.X = cbind(Weekly.train$Lag2)
test.X = cbind(Weekly.test$Lag2)
knn.pred = knn(train.X, test.X, Weekly.train$Direction, k=2)
table(knn.pred, Weekly.test$Direction)
mean(knn.pred==Weekly.test$Direction)
# **************** Question 11 ****************
set.seed(1)
train.X = cbind(Weekly.train$Lag2)
test.X = cbind(Weekly.test$Lag2)
knn.pred = knn(train.X, test.X, Weekly.train$Direction, k=3)
table(knn.pred, Weekly.test$Direction)
mean(knn.pred==Weekly.test$Direction)
set.seed(1)
train.X = cbind(Weekly.train$Lag2)
test.X = cbind(Weekly.test$Lag2)
knn.pred = knn(train.X, test.X, Weekly.train$Direction, k=10)
table(knn.pred, Weekly.test$Direction)
mean(knn.pred==Weekly.test$Direction)
set.seed(1)
train.X = cbind(Weekly.train$Lag2)
test.X = cbind(Weekly.test$Lag2)
knn.pred = knn(train.X, test.X, Weekly.train$Direction, k=5)
table(knn.pred, Weekly.test$Direction)
mean(knn.pred==Weekly.test$Direction)
?Auto
attach(Auto)
mpg.med = median(mpg)
mpg01 = rep(0, length(mpg))
mpg01[mpg>=mpg.med] = 1
df.Auto = data.frame(Auto, mpg01)
names(Auto)
plot(mpg01, cylinders)
plot(mpg01, cylinders, type='Box')
plot(mpg01, cylinders, type='box')
boxplot(mpg01~cylinders)
boxplot(cylinders~mpg01)
boxplot(cylinders~mpg01)
names(Auto)
boxplot(displacement~mpg01)
cor(Auto)
names(df.Auto)
cor(df.Auto[,-9])
pairs(df.Auto[,-9])
names(df.Auto)
boxplot(cylinders~mpg01)
boxplot(displacement~mpg01)
boxplot(horsepower~mpg01)
boxplot(weight~mpg01)
boxplot(acceleration~mpg01)
boxplot(year~mpg01)
boxplot(origin~mpg01)
nrow(df.Auto)
df.Auto
df.Auto
15/2
15//2
round(15/2)
n.obs = nrow(df.Auto)
train = sample( n.obs, round(n.obs/2) )
length(unique(train))
lda.fit = lda(mpg01~cylinders+displacement+horsepower+weight, data=Auto.train)
n.obs = nrow(df.Auto)
train = sample( n.obs, round(n.obs/2) )
Auto.train = df.Auto[train, ]
Auto.test = df.Auto[!train, ]
lda.fit = lda(mpg01~cylinders+displacement+horsepower+weight, data=Auto.train)
lda.pred = predict( lda.fit, newdata=Auto.test, type='response' )
lda.pred = predict( lda.fit, newdata=Auto.test, type='response' )$class
lda.pred = predict( lda.fit, newdata=Auto.test)$class
lda.pred
n.obs = nrow(df.Auto)
train = sample( n.obs, round(n.obs/2) )
Auto.train = df.Auto[train, ]
Auto.test = df.Auto[!train, ]
lda.fit = lda(mpg01~cylinders+displacement+horsepower+weight, data=Auto.train)
lda.pred = predict( lda.fit, newdata=Auto.test )$class
lda.pred = predict(lda.fit, newdata=Auto.test)$class
lda.pred
Auto.train
Auto.test = df.Auto[-train, ]
lda.fit = lda(mpg01~cylinders+displacement+horsepower+weight, data=Auto.train)
lda.pred = predict(lda.fit, newdata=Auto.test)$class
table(lda.pred, Auto.test$mpg01)
mean(lda.pred==Auto.test$mpg01)
qda.fit = qda(mpg01~cylinders+displacement+horsepower+weight, data=Auto.train)
qda.pred = predict(qda.fit, newdata=Auto.test)$class
table(qda.pred, Auto.test$mpg01)
mean(qda.pred==Auto.test$mpg01)
lda.fit = lda(mpg01~cylinders+displacement+horsepower+weight, data=Auto.train)
lda.pred = predict(lda.fit, newdata=Auto.test)$class
table(lda.pred, Auto.test$mpg01)
mean(lda.pred!=Auto.test$mpg01)
mean(qda.pred!=Auto.test$mpg01)
glm.fit = glm(mpg01~cylinders+displacement+horsepower+weight, data=Auto.train, type=binomial)
glm.prob = predict(glm.fit, newdata=Auto.test, type='response')
glm.pred = rep(0, nrow(Auto.test))
table(glm.pred, Auto.test$mpg01)
mean(glm.pred!=Auto.test$mpg01)
glm.fit = glm(mpg01~cylinders+displacement+horsepower+weight, data=Auto.train, type=binomial)
glm.prob = predict(glm.fit, newdata=Auto.test, type='response')
glm.pred = rep(0, nrow(Auto.test))
table(glm.pred, Auto.test$mpg01)
mean(glm.pred!=Auto.test$mpg01)
glm.fit = glm(mpg01~cylinders+displacement+horsepower+weight, data=Auto.train, family=binomial)
glm.fit = glm(mpg01~cylinders+displacement+horsepower+weight, data=Auto.train, family=binomial)
glm.prob = predict(glm.fit, newdata=Auto.test, type='response')
glm.pred = rep(0, nrow(Auto.test))
table(glm.pred, Auto.test$mpg01)
mean(glm.pred!=Auto.test$mpg01)
glm.pred
mean(glm.pred!=Auto.test$mpg01)
glm.fit = glm(mpg01~cylinders+displacement+horsepower+weight, data=Auto.train, family=binomial)
glm.prob = predict(glm.fit, newdata=Auto.test, type='response')
glm.pred = rep(0, nrow(Auto.test))
glm.pred[ glm.prob >= 0.5 ] = 1
table(glm.pred, Auto.test$mpg01)
mean(glm.pred!=Auto.test$mpg01)
library(class)
train.X = cbind(Auto.train$cylinders, Auto.train$displacement, Auto.train$horsepower, Auto.train$weight)
test.X = cbind(Auto.test$cylinders, Auto.test$displacement, Auto.test$horsepower, Auto.test$weight)
set.seed(1)
knn.pred = knn(train.X, test.X, Auto.train$mpg01, k=1)
set.seed(1)
knn.pred = knn(train.X, test.X, Auto.train$mpg01, k=3)
set.seed(1)
knn.pred = knn(train.X, test.X, Auto.train$mpg01, k=5)
train.X = cbind(Auto.train$cylinders, Auto.train$displacement, Auto.train$horsepower, Auto.train$weight)
test.X = cbind(Auto.test$cylinders, Auto.test$displacement, Auto.test$horsepower, Auto.test$weight)
set.seed(1)
knn.pred = knn(train.X, test.X, Auto.train$mpg01, k=1)
table(knn.pred, Auto.test$mpg01)
mean(knn.pred!=Auto.test$mpg01)
set.seed(1)
knn.pred = knn(train.X, test.X, Auto.train$mpg01, k=3)
table(knn.pred, Auto.test$mpg01)
mean(knn.pred!=Auto.test$mpg01)
set.seed(1)
knn.pred = knn(train.X, test.X, Auto.train$mpg01, k=5)
table(knn.pred, Auto.test$mpg01)
mean(knn.pred!=Auto.test$mpg01)
Power <- function(){
print(2^3)
}
Power <- function(){
print(2^3)
}
Power()
Power2 <- function(x, a){
print(x^a)
}
Power2(3, 8)
Power2(10, 3)
Power2(8, 17)
Power2(131, 3)
Power3 <- function(x, a){ return( x^a ) }
x = 1:10
y = Power3(x)
y = Power3(x, 2)
x = 1:10
y = Power3(x, 2)
plot(x, y, log='y')
PlotPower <- function(x, a){
y = Power2(x, a)
plot(x, y)
}
PlotPower(1:10, 3)
?Boston
names(Boston)
library(MASS)
attach(Boston)
crim.med = median(crim)
crim01 = rep(0, nrow(Boston))
crim01[ crim >= crim.med ] = 1
df.Boston = data.frame(Boston, crim01)
pairs(df.Boston)
names(Boston)
cor(df.Boston)
names(Boston)
cor(df.Boston)
pairs(df.Boston)
boxplot(zn~crim01, main='zn')
boxplot(indus~crim01, main='indus')
boxplot(chas~crim01, main='chas')
boxplot(nox~crim01, main='nox')
boxplot(rm~crim01, main='rm')
boxplot(age~crim01, main='age')
boxplot(dis~crim01, main='dis')
boxplot(rad~crim01, main='rad')
boxplot(tax~crim01, main='tax')
boxplot(ptratio~crim01, main='ptratio')
boxplot(black~crim01, main='black')
boxplot(lstat~crim01, main='lstat')
boxplot(medv~crim01, main='medv')
glm.fit = glm(crim01~.-crim, data=Boston.train, family=binomial)
glm.prob = predict(glm.fit, newdata=Boston.test, type='response')
glm.pred = rep(0, nrow(Boston.test))
glm.pred[ glm.prob >= 0.5 ] = 1
table(glm.pred, Boston.test$crim01)
mean(glm.pred!=Boston.test$crim01)
n.obs = nrow(df.Boston)
train = sample(n.obs, round(n.obs/2))
Boston.train = df.Boston[train, ]
Boston.test = df.Boston[-train, ]
glm.fit = glm(crim01~.-crim, data=Boston.train, family=binomial)
glm.prob = predict(glm.fit, newdata=Boston.test, type='response')
glm.pred = rep(0, nrow(Boston.test))
glm.pred[ glm.prob >= 0.5 ] = 1
table(glm.pred, Boston.test$crim01)
mean(glm.pred!=Boston.test$crim01)
lda.fit = lda(crim01~.-crim, data=Boston.train)
lda.pred = predict(lda.fit, newdata=Boston.test)
table(lda.pred, Boston.test$crim01)
mean(lda.pred!=Boston.test$crim01)
glm.fit = glm(crim01~.-crim, data=Boston.train, family=binomial)
glm.prob = predict(glm.fit, newdata=Boston.test, type='response')
glm.pred = rep(0, nrow(Boston.test))
glm.pred[ glm.prob >= 0.5 ] = 1
table(glm.pred, Boston.test$crim01)
mean(glm.pred!=Boston.test$crim01)
lda.fit = lda(crim01~.-crim, data=Boston.train)
lda.pred = predict(lda.fit, newdata=Boston.test)$class
table(lda.pred, Boston.test$crim01)
mean(lda.pred!=Boston.test$crim01)
qda.fit = qda(crim01~.-crim, data=Boston.train)
qda.pred = predict(qda.fit, newdata=Boston.test)$class
table(qda.pred, Boston.test$crim01)
mean(qda.pred!=Boston.test$crim01)
train.X = cbind(Boston.train[, -c(crim, crim01)])
dim(train.X)
Boston.train[, -c(crim, crim01)]
dim(Boston.train[, -c(crim, crim01)])
train.X = Boston[, -1][train, ]
train.X = cbind( Boston[, -1][train, ] )
train.X = cbind( Boston[, -1][train, ] )
typeof(train.X)
class(train.X)
train.X = data.matrix(Boston[, -1][train, ])
train.X = data.matrix(Boston[, -1][train, ])
test.X = data.matrix(Boston[, -1][-train, ])
knn.pred1 = knn(train.X, test.X, Boston.test$crim01, k=1)
table(knn.pred1, Boston.test$crim01)
mean(knn.pred1 != Boston.test$crim01)
train.X = data.matrix(Boston[, -1][train, ])
test.X = data.matrix(Boston[, -1][-train, ])
knn.pred1 = knn(train.X, test.X, Boston.test$crim01, k=1)
table(knn.pred1, Boston.test$crim01)
mean(knn.pred1 != Boston.test$crim01)
# test error rate is 51.0%
mean(qda.pred!=Boston.test$crim01)
knn.pred3 = knn(train.X, test.X, Boston.test$crim01, k=3)
table(knn.pred3, Boston.test$crim01)
mean(knn.pred3 != Boston.test$crim01)
knn.pred5 = knn(train.X, test.X, Boston.test$crim01, k=5)
table(knn.pred5, Boston.test$crim01)
mean(knn.pred5 != Boston.test$crim01)
knn.pred10 = knn(train.X, test.X, Boston.test$crim01, k=10)
table(knn.pred10, Boston.test$crim01)
mean(knn.pred10 != Boston.test$crim01)
train.X = data.matrix(Boston[, -1][train, ])
test.X = data.matrix(Boston[, -1][-train, ])
set.seed(1)
knn.pred1 = knn(train.X, test.X, Boston.test$crim01, k=1)
table(knn.pred1, Boston.test$crim01)
mean(knn.pred1 != Boston.test$crim01)
# test error rate is 51.0%
set.seed(1)
knn.pred3 = knn(train.X, test.X, Boston.test$crim01, k=3)
table(knn.pred3, Boston.test$crim01)
mean(knn.pred3 != Boston.test$crim01)
# test error rate is 50.2%
set.seed(1)
knn.pred5 = knn(train.X, test.X, Boston.test$crim01, k=5)
table(knn.pred5, Boston.test$crim01)
mean(knn.pred5 != Boston.test$crim01)
# test error rate is 50.2%
set.seed(1)
knn.pred10 = knn(train.X, test.X, Boston.test$crim01, k=10)
table(knn.pred10, Boston.test$crim01)
mean(knn.pred10 != Boston.test$crim01)
# test error rate is 51.8%
set.seed(1)
knn.pred1 = knn(train.X, test.X, Boston.test$crim01, k=1)
table(knn.pred1, Boston.test$crim01)
mean(knn.pred1 != Boston.test$crim01)
set.seed(1)
knn.pred3 = knn(train.X, test.X, Boston.test$crim01, k=3)
table(knn.pred3, Boston.test$crim01)
mean(knn.pred3 != Boston.test$crim01)
# ---- split ----
n.obs = nrow(df.Boston)
train = sample(n.obs, round(n.obs*2/3))
Boston.train = df.Boston[train, ]
Boston.test = df.Boston[-train, ]
# ---- logistic ----
glm.fit = glm(crim01~.-crim, data=Boston.train, family=binomial)
glm.prob = predict(glm.fit, newdata=Boston.test, type='response')
glm.pred = rep(0, nrow(Boston.test))
glm.pred[ glm.prob >= 0.5 ] = 1
table(glm.pred, Boston.test$crim01)
mean(glm.pred!=Boston.test$crim01)
# test error rate is 9.5%
# ---- lda ----
lda.fit = lda(crim01~.-crim, data=Boston.train)
lda.pred = predict(lda.fit, newdata=Boston.test)$class
table(lda.pred, Boston.test$crim01)
mean(lda.pred!=Boston.test$crim01)
# test error rate is 13.0%
# ---- qda ----
qda.fit = qda(crim01~.-crim, data=Boston.train)
qda.pred = predict(qda.fit, newdata=Boston.test)$class
table(qda.pred, Boston.test$crim01)
mean(qda.pred!=Boston.test$crim01)
# test error rate is 9.9%
# ---- knn ----
train.X = data.matrix(Boston[, -1][train, ])
test.X = data.matrix(Boston[, -1][-train, ])
set.seed(1)
knn.pred1 = knn(train.X, test.X, Boston.test$crim01, k=1)
table(knn.pred1, Boston.test$crim01)
mean(knn.pred1 != Boston.test$crim01)
# test error rate is 51.0%
set.seed(1)
knn.pred3 = knn(train.X, test.X, Boston.test$crim01, k=3)
table(knn.pred3, Boston.test$crim01)
mean(knn.pred3 != Boston.test$crim01)
# test error rate is 50.6%
set.seed(1)
knn.pred5 = knn(train.X, test.X, Boston.test$crim01, k=5)
table(knn.pred5, Boston.test$crim01)
mean(knn.pred5 != Boston.test$crim01)
# test error rate is 50.2%
set.seed(1)
knn.pred10 = knn(train.X, test.X, Boston.test$crim01, k=10)
table(knn.pred10, Boston.test$crim01)
mean(knn.pred10 != Boston.test$crim01)
# test error rate is 51.8%
n.obs = nrow(df.Boston)
train = sample(n.obs, round(n.obs*2/3))
Boston.train = df.Boston[train, ]
Boston.test = df.Boston[-train, ]
# ---- logistic ----
glm.fit = glm(crim01~.-crim, data=Boston.train, family=binomial)
glm.prob = predict(glm.fit, newdata=Boston.test, type='response')
glm.pred = rep(0, nrow(Boston.test))
glm.pred[ glm.prob >= 0.5 ] = 1
table(glm.pred, Boston.test$crim01)
mean(glm.pred!=Boston.test$crim01)
# ---- lda ----
lda.fit = lda(crim01~.-crim, data=Boston.train)
lda.pred = predict(lda.fit, newdata=Boston.test)$class
table(lda.pred, Boston.test$crim01)
mean(lda.pred!=Boston.test$crim01)
# ---- qda ----
qda.fit = qda(crim01~.-crim, data=Boston.train)
qda.pred = predict(qda.fit, newdata=Boston.test)$class
table(qda.pred, Boston.test$crim01)
mean(qda.pred!=Boston.test$crim01)
train.X = data.matrix(Boston[, -1][train, ])
test.X = data.matrix(Boston[, -1][-train, ])
set.seed(1)
knn.pred1 = knn(train.X, test.X, Boston.train$crim01, k=1)
table(knn.pred1, Boston.test$crim01)
mean(knn.pred1 != Boston.test$crim01)
set.seed(1)
knn.pred3 = knn(train.X, test.X, Boston.train$crim01, k=3)
table(knn.pred3, Boston.test$crim01)
mean(knn.pred3 != Boston.test$crim01)
set.seed(1)
knn.pred5 = knn(train.X, test.X, Boston.train$crim01, k=5)
table(knn.pred5, Boston.test$crim01)
mean(knn.pred5 != Boston.test$crim01)
set.seed(1)
knn.pred10 = knn(train.X, test.X, Boston.train$crim01, k=10)
table(knn.pred10, Boston.test$crim01)
mean(knn.pred10 != Boston.test$crim01)
