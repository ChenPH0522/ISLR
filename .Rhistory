par(mfrow=c(2,2))
plot(lm.fit)
plot(lm.fit)
plot(lm.fit)
par(mfrow=c(2,2))
plot(lm.fit)
pair(Auto)
pairs(Auto)
cor(Auto[-name, ])
cor(.-name)
cor(Auto[.-name, ])
cor(Auto[-name])
Auto[-name]
cor(Auto[,-name])
Auto[,-name]
names(Auto)
cor(Auto[,--1])
names(Auto)
cor(Auto[-9])
lm.fit = lm(mpg~.-name)
summary(lm.fit)
lm.fit = lm(mpg~.-name, Auto)
summary(lm.fit)
fix(Auto)
?Auto
par(mfrow=c(2,2))
plot(lm.fit)
lm.fit = lm(mpg~horsepower)
par(mfrow=c(2,2))
plot(lm.fit)
lm.fit = lm(mpg~.-name, Auto)
par(mfrow=c(2,2))
plot(lm.fit)
lm.fit = lm(mpg~(.)^2, Auto)
summary(lm.fit)
lm.fit = lm(mpg~(.-name)^2, Auto)
summary(lm.fit)
lm.fit = lm(mpg~(.-name)^2, Auto)
summary(lm.fit)
lm.fit = lm(mpg~.-name + acceleration:origin, Auto)
summary(lm.fit)
lm.fit = lm(mpg~.-c(cylinders, horsepower, weight, year) + acceleration:origin, Auto)
summary(lm.fit)
lm.fit = lm(mpg~displacement + acceleration + origin + acceleration:origin, Auto)
summary(lm.fit)
lm.fit = lm(mpg~displacement + acceleration*origin, Auto)
summary(lm.fit)
lm.fit.log = lm(log(mpg)~.-name, Auto)
summary(lm.fit.log)
lm.fit.log = lm(log(mpg)~.-name, Auto)
summary(lm.fit.log)
plot(lm.fit.log)
plot(lm.fit.log)
lm.fit = lm(mpg~.-name, Auto)
summary(lm.fit)
lm.fit.log = lm(log(mpg)~.-name, Auto)
summary(lm.fit.log)
lm.fit.sqrt = lm(sqrt(mpg)~.-name, Auto)
summary(lm.fit.sqrt)
lm.fit.sq = lm(mpg^2~.-name, Auto)
summary(lm.fit.sq)
library(ISLR)
?Carseats
lm.fit = lm(Price~Urban + US, Carseats)
summary(lm.fit)
lm.fit = lm(Price~Urban*US, Carseats)
summary(lm.fit)
contrasts(Urban)
contrasts(US)
contrasts(Carseats$US)
lm.fit = lm(Price~Urban*US, Carseats)
summary(lm.fit)
lm.fit = lm(Price~Urban + US, Carseats)
summary(lm.fit)
lm.fit = lm(Price~Urban*US, Carseats)
summary(lm.fit)
lm.fit = lm(Price~Urban*US, Carseats)
summary(lm.fit)
lm.fit = lm(Price~Urban+US, Carseats)
summary(lm.fit)
lm.fit = lm(Price~, Carseats)
lm.fit = lm(Price, Carseats)
lm.fit2 = lm(Price~1, Carseats)
summary(lm.fit2)
par(mfrow=c(2,2))
plot(lm.fit)
par(mfrow=c(2,2))
plot(lm.fit2)
lm.fit = lm(Sales ~ Price+Urban+US, Carseats)
summary(lm.fit)
lm.fit2 = lm(Sales ~ Price+USYes)
summary(lm.fit2)
lm.fit2 = lm(Sales ~ Price+USYes, Carseats)
summary(lm.fit2)
lm.fit2 = lm(Sales ~ Price+US, Carseats)
summary(lm.fit2)
par(mfrow=c(2,2))
plot(lm.fit)
par(mfrow=c(2,2))
plot(lm.fit2)
summary(lm.fit)
summary(lm.fit2)
confint(lm.fit2, level=0.95)
nroW(Carseats)
nroWs(Carseats)
dim(Carseats)
lm.fit = lm(y~x+0)
summary(lm.fit)
set.seed(1)
x = rnorm(100)
y = 2*x + rnorm(100)
# ---- (a) ----
lm.fit = lm(y~x+0)
summary(lm.fit)
lm.fit2 = lm(x~y+0)
summary(lm.fit2)
x * y
t(x) * y
t(x)
x * t(y)
dim(t(y))
dim(t(x))
t(x) %*% y
sum(x * x)
x ^ 2
x
sqrt(n) * t(x)%*%y / (sum(x^2)*sum(y^2) - (t(x)%*%y)^2 )
n = 100
sqrt(n) * t(x)%*%y / (sum(x^2)*sum(y^2) - (t(x)%*%y)^2 )
sqrt(n) * t(x)%*%y / sqrt(sum(x^2)*sum(y^2) - (t(x)%*%y)^2 )
summary(lm.fit2)
n = 100
tstat = sqrt(n-1) * t(x)%*%y / sqrt(sum(x^2)*sum(y^2) - (t(x)%*%y)^2 )
print(tstat)
lm.fit1 = lm(y~x)
summary(lm.fit1)
lm.fit2 = lm(x~y)
summary(lm.fit2)
names(lm.fit)
coef(lm.fit1)
lm.fit
n = 100
x = rnorm(n)
y = x + rnorm(n)
lm.fit1 = lm(y~x+0)
summary(lm.fit1)
lm.fit2 = lm(x~y+0)
summary(lm.fit2)
n = 100
x = rnorm(100)
y = (x + rnorm(n))/sqrt(2)
lm.fit1 = lm(y~x+0)
summary(lm.fit1)
lm.fit2 = lm(x~y+0)
summary(lm.fit2)
set.seed(1)
n = 100
x = rnorm(100)
y = (x + rnorm(n))/sqrt(2)
lm.fit1 = lm(y~x+0)
summary(lm.fit1)
lm.fit2 = lm(x~y+0)
summary(lm.fit2)
set.seed(2)
n = 100
x = rnorm(100)
y = (x + rnorm(n))/sqrt(2)
lm.fit1 = lm(y~x+0)
summary(lm.fit1)
lm.fit2 = lm(x~y+0)
summary(lm.fit2)
set.seed(1)
n = 100
x = rnorm(100)
y = (x + rnorm(n))/sqrt(2)
lm.fit1 = lm(y~x+0)
summary(lm.fit1)
lm.fit2 = lm(x~y+0)
summary(lm.fit2)
n = 100
x = 1:100
y = 100:1
lm.fit1 = lm(y~x+0)
summary(lm.fit1)
lm.fit2 = lm(x~y+0)
summary(lm.fit2)
set.seed(1)
# ---- (a) ----
x = rnorm(n, 0, 1)
# ---- (b) ----
eps = rnorm(n, 0, 0.25)
# ---- (c) ----
y = -1 + 0.5 * x + eps
# length of y: 100
# beta_0 = -1
# beta_1 = 0.5
plot(x, y)
lm.fit = lm(y~x)
summary(lm.fit)
abline(lm.fit)
abline(lm.fit, color='red')
abline(lm.fit, col='red')
abline(lm.fit, cols='red')
abline(lm.fit, col='red')
abline(lm.fit, col='red')
legend('fitted line')
legend(-2, 0, 'fitted line')
legend(-2, 0, legend='fitted line', col='red')
abline(lm.fit, col='red')
legend(-2, 0, legend='fitted line', col='red')
legend(-2, 0, legend='fitted line', col='red', lty=1)
abline(lm.fit, col='red')
legend(-2, 0, legend='fitted line', col='red', lty=1)
plot(x, y)
# ---- (e) ----
lm.fit = lm(y~x)
summary(lm.fit)
# the estimates of beta_0 and beta_1 are close to the true value
# ---- (f) ----
abline(lm.fit, col='red')
legend(-2, 0, legend='fitted line', col='red', lty=1)
lm.fit2 = lm(y~poly(x, 2))
summary(lm.fit2)
poly(x, 2)
lm.fit2 = lm(y~poly(x, 2))
summary(lm.fit2)
lm.fit = lm(y~x)
summary(lm.fit)
set.seed(1)
x = rnorm(n, 0, 1)
eps = rnorm(n, 0, 0.04)
y = -1 + 0.5 * x + eps
plot(x, y)
lm.fit = lm(y~x)
summary(lm.fit)
abline(lm.fit, col='red')
legend(-2, 0, legend='fitted line', col='red', lty=1)
set.seed(1)
x = rnorm(n, 0, 1)
eps = rnorm(n, 0, 0.64)
y = -1 + 0.5 * x + eps
plot(x, y)
lm.fit = lm(y~x)
summary(lm.fit)
abline(lm.fit, col='red')
legend(-2, 0, legend='fitted line', col='red', lty=1)
set.seed(1)
# ---- (a) ----
x = rnorm(n, 0, 1)
# ---- (b) ----
eps = rnorm(n, 0, 0.25)
# ---- (c) ----
y = -1 + 0.5 * x + eps
# length of y: 100
# beta_0 = -1
# beta_1 = 0.5
# ---- (d) ----
plot(x, y)
# ---- (e) ----
lm.fit = lm(y~x)
summary(lm.fit)
# the estimates of beta_0 and beta_1 are close to the true value
# ---- (f) ----
abline(lm.fit, col='red')
legend(-2, 0, legend='fitted line', col='red', lty=1)
# ---- (g) ----
lm.fit2 = lm(y~poly(x, 2))
summary(lm.fit2)
# The quadratic term improves the r-squared only marginally, but the coefficient
# for the quadratic term is not statistically significant
# ---- (h) ----
set.seed(1)
x = rnorm(n, 0, 1)
eps = rnorm(n, 0, 0.04)
y = -1 + 0.5 * x + eps
plot(x, y)
lm.fit2 = lm(y~x)
summary(lm.fit)
abline(lm.fit, col='red')
legend(-2, 0, legend='fitted line', col='red', lty=1)
# With less noise, the model fits better as the r-squared is drastically
# improved.
# ---- (i) ----
set.seed(1)
x = rnorm(n, 0, 1)
eps = rnorm(n, 0, 0.64)
y = -1 + 0.5 * x + eps
plot(x, y)
lm.fit3 = lm(y~x)
summary(lm.fit)
abline(lm.fit, col='red')
legend(-2, 0, legend='fitted line', col='red', lty=1)
# With more noise, the model fits worse as the r-squared is drastically
# decreased.
# ---- (j) ----
confint(lm.fit)
confint(lm.fit2)
confint(lm.fit3)
set.seed(1)
x1 = runif(100)
x2 = 0.5 * x1 + rnorm(100)/10
y = 2 + 2*x1 + 0.3*x2 + rnorm(100)
# y = beta0 + beta1*x1 + beta2*x2 + eps
# beta0 = 2, beta1 = 2, beta2 = 0.3
cor(x1, x2)
plot(x1, x2)
lm.fit = lm(y~x1+x2)
summary(lm.fit)
lm.fit2 = lm(y~x1)
summary(lm.fit2)
lm.fit3 = lm(y~x2)
summary(lm.fit3)
# ---- (g) ----
x1 = c(x1, 0.1)
x2 = c(x2, 0.8)
y = c(y, 6)
lm.fit = lm(y~x1+x2)
summary(lm.fit)
lm.fit2 = lm(y~x1)
summary(lm.fit2)
lm.fit3 = lm(y~x2)
summary(lm.fit3)
lm.fit = lm(y~x1+x2)
summary(lm.fit)
par(mfrow=c(2,2))
plot(lm.fit)
lm.fit2 = lm(y~x1)
summary(lm.fit2)
par(mfrow=c(2,2))
plot(lm.fit2)
lm.fit3 = lm(y~x2)
summary(lm.fit3)
par(mfrow=c(2,2))
plot(lm.fit3)
?Boston
library(MASS)
?Boston
# -------------------- Problem 15 --------------------
library(MASS)
attach(Boston)
for name in names(Boston)[-crim]{
lm.fit = lm(crim~name, Boston)
summary(lm.fit)
}
for (name in names(Boston)[-crim]){
lm.fit = lm(crim~name, Boston)
summary(lm.fit)
}
for (name in names(Boston)[-crim]){
lm.fit = lm(crim~Boston[[name]], Boston)
summary(lm.fit)
}
for (name in names(Boston)[-crim]){
lm.fit = lm(crim~Boston[[name]], Boston)
print(summary(lm.fit))
}
names(Boston)
names(Boston)[-crim]
names(Boston)[-1]
names(Boston)
for (name in names(Boston)[-1]){
lm.fit = lm(crim~Boston[[name]], Boston)
print(summary(lm.fit))
}
names(Boston)
for (name in names(Boston)[-1]){
lm.fit = lm(crim~Boston[[name]], Boston)
print(name)
summary(lm.fit)
}
#
names(Boston)
for (name in names(Boston)[-1]){
lm.fit = lm(crim~Boston[[name]], Boston)
print(name)
print(summary(lm.fit))
}
#
lm.fit = lm(crim~., Boston)
summary(lm.fit)
coef(lm.fit)
coef(lm.fit)['zn']
coef(lm.fit)[['zn']]
lm.fit = lm(crim~zn, Boston)
coef(lm.fit)
coef(lm.fit)[2]
coef(lm.fit)[[2]]
x = vector()
for (name in names(Boston)[-1]){
lm.fit = lm(crim~Boston[[name]], Boston)
x = c(x, coef(lm.fit)[[name]])
}
coef(lm.fit)[[name]]
coef(lm.fit)[name]
coef(lm.fit)
x = vector()
for (name in names(Boston)[-1]){
lm.fit = lm(crim~Boston[[name]], Boston)
x = c(x, coef(lm.fit)[[2]])
}
lm.fit = lm(crim~., Boston)
coef(lm.fit)[2:end]
coef(lm.fit)[[-1]]
coef(lm.fit)
coef(lm.fit)[-[1]]
coef(lm.fit)[[-1]]
coef(lm.fit)[[2:14]]
coef(lm.fit)[[2:13]]
coef(lm.fit)[2:13]
y = coef(lm.fit)[2:end]
ans = coef(lm.fit)
ans
coef(lm.fit[, -1])
coef(lm.fit[-1])
coef(lm.fit)[, -1]
coef(lm.fit)[-1]
coef(lm.fit)[[-1]
]
coef(lm.fit)[[-1]]
coef(lm.fit)[-1]
ans = coef(lm.fit)[-1]
lm.fit = lm(crim~., Boston)
y = coef(lm.fit)[-1]
plot(x, y)
x
y
x = vector()
for (name in names(Boston)[-1]){
lm.fit = lm(crim~Boston[[name]], Boston)
x = c(x, coef(lm.fit)[2])
}
lm.fit = lm(crim~., Boston)
y = coef(lm.fit)[-1]
plot(x, y)
plot(x, y)
lm.fit = lm(crim~., Boston)
y = unname(coef(lm.fit)[-1])
x = vector()
for (name in names(Boston)[-1]){
lm.fit = lm(crim~Boston[[name]], Boston)
x = c(x, coef(lm.fit)[2])
}
lm.fit = lm(crim~., Boston)
y = unname(coef(lm.fit)[-1])
plot(x, y)
x = vector()
for (name in names(Boston)[-1]){
lm.fit = lm(crim~Boston[[name]], Boston)
x = c(x, coef(lm.fit)[[2]])
}
lm.fit = lm(crim~., Boston)
y = unname(coef(lm.fit)[-1])
plot(x, y)
plot(x, y)
par(mfrow=c(1,1))
plot(x, y)
x = vector()
for (name in names(Boston)[-1]){
lm.fit = lm(crim~Boston[[name]], Boston)
x = c(x, coef(lm.fit)[[2]])
}
lm.fit = lm(crim~., Boston)
#y = unname(coef(lm.fit)[-1])
y = coef(lm.fit)[-1]
par(mfrow=c(1,1))
plot(x, y)
x = vector()
for (name in names(Boston)[-1]){
lm.fit = lm(crim~Boston[[name]], Boston)
x = c(x, coef(lm.fit)[[2]])
}
lm.fit = lm(crim~., Boston)
y = unname(coef(lm.fit)[-1])
par(mfrow=c(1,1))
plot(x, y)
for (name in names(Boston)[-1]){
lm.fit = lm(crim~poly(Boston[[name]], 3), Boston)
print(name)
print(summary(lm.fit))
}
for (name in names(Boston)[-1]){
lm.fit = lm(crim~poly(Boston[name], 3), Boston)
print(name)
print(summary(lm.fit))
}
for (name in names(Boston)[-1]){
print(name)
lm.fit = lm(crim~poly(Boston[[name]], 3), Boston)
print(summary(lm.fit))
}
for (name in names(Boston)[-1]){
print(name)
lm.fit = lm(crim~poly(Boston[[name]], 3), Boston)
print(summary(lm.fit))
}
chas
?Boston
names(Boston)[-c('crim', 'chas')]
names(Boston)
'a' == 'a'
for (name in names(Boston)[-c('crim', 'chas')]){
if (name=='crim' | name=='chas') {next}
print(name)
lm.fit = lm(crim~poly(Boston[[name]], 3), Boston)
print(summary(lm.fit))
}
for (name in names(Boston)){
if (name=='crim' | name=='chas') {next}
print(name)
lm.fit = lm(crim~poly(Boston[[name]], 3), Boston)
print(summary(lm.fit))
}
