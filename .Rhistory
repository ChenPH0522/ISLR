plot(1:k.max, rss.cv, type='l', xlab='', ylab='')
title(main='Cross Validation RSS', xlab='Polynomial Degree', ylab='RSS')
degree = which.min(rss.cv)
points(degree, rss.cv[degree], col='red', cex=2)
msg = paste0( 'The polynomial degree chosen using cross-validation is: ',  degree)
print(msg)
# ANOVA comparison
fit.cv = list()
for(k in 1:k.max){
fit.cv[[k]] = lm(wage~poly(age, k), data=Wage)
}
arg = paste0( paste0('fit.cv[[', 1:k.max, ']]'), collapse=', ')
cmd = paste0('anova(', arg, ')')
eval(parse(text=cmd))
library(boot)
library(ISLR)
attach(Wage)
set.seed(1)
# ---------------- (a) ----------------
k.max = 10
rss.cv = rep(0, k.max)
for(k in 1:k.max){
fit = glm(wage~poly(age, k), data=Wage)
rss.cv[k] = cv.glm(Wage, fit, K=10)$delta[1]
}
# cross validation RSS comparison
plot(1:k.max, rss.cv, type='l', xlab='', ylab='')
title(main='Cross Validation RSS', xlab='Polynomial Degree', ylab='RSS')
degree = which.min(rss.cv)
points(degree, rss.cv[degree], col='red', cex=2, pch=20)
msg = paste0( 'The polynomial degree chosen using cross-validation is: ',  degree)
print(msg)
# ANOVA comparison
fit.cv = list()
for(k in 1:k.max){
fit.cv[[k]] = lm(wage~poly(age, k), data=Wage)
}
arg = paste0( paste0('fit.cv[[', 1:k.max, ']]'), collapse=', ')
cmd = paste0('anova(', arg, ')')
eval(parse(text=cmd))
fit.4 = fit.anova[degree]
pred.4 = predict(fit.4)
library(boot)
library(ISLR)
attach(Wage)
set.seed(1)
# ---------------- (a) ----------------
k.max = 10
rss.cv = rep(0, k.max)
for(k in 1:k.max){
fit = glm(wage~poly(age, k), data=Wage)
rss.cv[k] = cv.glm(Wage, fit, K=10)$delta[1]
}
# cross validation RSS comparison
plot(1:k.max, rss.cv, type='l', xlab='', ylab='')
title(main='Cross Validation RSS', xlab='Polynomial Degree', ylab='RSS')
degree = which.min(rss.cv)
points(degree, rss.cv[degree], col='red', cex=2, pch=20)
msg = paste0( 'The polynomial degree chosen using cross-validation is: ',  degree)
print(msg)
# ANOVA comparison
fit.anova = list()
for(k in 1:k.max){
fit.anova[[k]] = lm(wage~poly(age, k), data=Wage)
}
arg = paste0( paste0('fit.anova[[', 1:k.max, ']]'), collapse=', ')
cmd = paste0('anova(', arg, ')')
eval(parse(text=cmd))
# The cross-validation method chooses degree=4
# The ANOVA method chooses degree = 3 or 4
# Let's assume the degree = 4
fit.4 = fit.anova[degree]
pred.4 = predict(fit.4)
fit.4 = fit.anova[[degree]]
pred.4 = predict(fit.4)
pred.4 = predict(fit.4, type='response')
plot(Wage$age, Wage$wage, xlab='Age', ylab='Wage', col='darkgrey')
lines(age.range, pred.4, type='l', col='blue', lwd=2)
title('Actual vs Prediction')
fit.4 = fit.anova[[degree]]
age.range = min(Wage$age):max(Wage$age)
pred.4 = predict(fit.4, newdata=age.range)
plot(Wage$age, Wage$wage, xlab='Age', ylab='Wage', col='darkgrey')
lines(age.range, pred.4, type='l', col='blue', lwd=2)
title('Actual vs Prediction')
pred.4 = predict(fit.4, newdata=age.range, type='response')
age.range
fit.4
library(boot)
library(ISLR)
attach(Wage)
set.seed(1)
# ---------------- (a) ----------------
k.max = 10
rss.cv = rep(0, k.max)
for(k in 1:k.max){
fit = glm(wage~poly(age, k), data=Wage)
rss.cv[k] = cv.glm(Wage, fit, K=10)$delta[1]
}
# cross validation RSS comparison
plot(1:k.max, rss.cv, type='l', xlab='', ylab='')
title(main='Cross Validation RSS', xlab='Polynomial Degree', ylab='RSS')
degree = which.min(rss.cv)
points(degree, rss.cv[degree], col='red', cex=2, pch=20)
msg = paste0( 'The polynomial degree chosen using cross-validation is: ',  degree)
print(msg)
# ANOVA comparison
fit.anova = list()
for(k in 1:k.max){
fit.anova[[k]] = lm(wage~poly(age, k), data=Wage)
}
arg = paste0( paste0('fit.anova[[', 1:k.max, ']]'), collapse=', ')
cmd = paste0('anova(', arg, ')')
eval(parse(text=cmd))
# The cross-validation method chooses degree=4
# The ANOVA method chooses degree = 3 or 4
# Let's assume the degree = 4
fit.4 = fit.anova[[degree]]
age.range = min(Wage$age):max(Wage$age)
pred.4 = predict(fit.4, newdata=age.range, type='response')
plot(Wage$age, Wage$wage, xlab='Age', ylab='Wage', col='darkgrey')
lines(age.range, pred.4, type='l', col='blue', lwd=2)
title('Actual vs Prediction')
fit.4 = fit.anova[[degree]]
age.range = min(Wage$age):max(Wage$age)
pred.4 = predict(fit.4, newdata=list(age=age.range), type='response')
plot(Wage$age, Wage$wage, xlab='Age', ylab='Wage', col='darkgrey')
lines(age.range, pred.4, type='l', col='blue', lwd=2)
title('Actual vs Prediction')
degree
fit.anova = list()
for(k in 1:k.max){
fit.anova[[k]] = lm(wage~poly(age, k), data=Wage)
}
arg = paste0( paste0('fit.anova[[', 1:k.max, ']]'), collapse=', ')
cmd = paste0('anova(', arg, ')')
eval(parse(text=cmd))
library(boot)
library(ISLR)
attach(Wage)
set.seed(1)
# ---------------- (a) ----------------
k.max = 10
rss.cv = rep(0, k.max)
for(k in 1:k.max){
fit = glm(wage~poly(age, k), data=Wage)
rss.cv[k] = cv.glm(Wage, fit, K=10)$delta[1]
}
# cross validation RSS comparison
plot(1:k.max, rss.cv, type='l', xlab='', ylab='')
title(main='Cross Validation RSS', xlab='Polynomial Degree', ylab='RSS')
degree = which.min(rss.cv)
points(degree, rss.cv[degree], col='red', cex=2, pch=20)
msg = paste0( 'The polynomial degree chosen using cross-validation is: ',  degree)
print(msg)
# ANOVA comparison
fit.anova = list()
for(k in 1:k.max){
fit.anova[[k]] = lm(wage~poly(age, k), data=Wage)
}
arg = paste0( paste0('fit.anova[[', 1:k.max, ']]'), collapse=', ')
cmd = paste0('anova(', arg, ')')
eval(parse(text=cmd))
fit.4 = fit.anova[[degree]]
age.range = min(Wage$age):max(Wage$age)
age.range
fit.4
fit.4 = lm(wage~poly(age, 4), data=Wage)
fit.4
age.range = min(Wage$age):max(Wage$age)
pred.4 = predict(fit.4, newdata=list(age=age.range), type='response')
plot(Wage$age, Wage$wage, xlab='Age', ylab='Wage', col='darkgrey')
lines(age.range, pred.4, type='l', col='blue', lwd=2)
title('Actual vs Prediction')
fit.4 = lm(wage~poly(age, 3), data=Wage)
age.range = min(Wage$age):max(Wage$age)
pred.4 = predict(fit.4, newdata=list(age=age.range), type='response')
plot(Wage$age, Wage$wage, xlab='Age', ylab='Wage', col='darkgrey')
lines(age.range, pred.4, type='l', col='blue', lwd=2)
title('Actual vs Prediction')
k = 2
cut(age, k)
length( unique(Wage$age) )
cut(Wage$age, 1)
cut(Wage$age, 2)
k.max = length(unique(Wage$age))
rss.cv = rep(0, k.max-1)
for (k in 2:k.max){
fit = glm(Wage~cut(age, k), data=Wage)
rss.cv[k] = cv.glm(Wage, fit, K=10)
}
# ---------------- (b) ----------------
k.max = length(unique(Wage$age))
rss.cv = rep(0, k.max-1)
for (k in 2:k.max){
fit = glm(wage~cut(age, k), data=Wage)
rss.cv[k] = cv.glm(Wage, fit, K=10)$delta[1]
}
# ---------------- (b) ----------------
k.max = length(unique(Wage$age))
rss.cv = rep(0, k.max-1)
for (k in 2:k.max){
fit = glm(wage~cut(age, k), data=Wage)
rss.cv[k] = cv.glm(Wage, fit, K=10)$delta[1]
}
k.max = length(unique(Wage$age))-1
rss.cv = rep(0, k.max-1)
for (k in 2:k.max){
fit = glm(wage~cut(age, k), data=Wage)
rss.cv[k] = cv.glm(Wage, fit, K=10)$delta[1]
}
k.max = 50
rss.cv = rep(0, k.max-1)
for (k in 2:k.max){
fit = glm(wage~cut(age, k), data=Wage)
rss.cv[k] = cv.glm(Wage, fit, K=10)$delta[1]
}
k.max = 40
rss.cv = rep(0, k.max-1)
for (k in 2:k.max){
fit = glm(wage~cut(age, k), data=Wage)
rss.cv[k] = cv.glm(Wage, fit, K=10)$delta[1]
}
k.max = 30
rss.cv = rep(0, k.max-1)
for (k in 2:k.max){
fit = glm(wage~cut(age, k), data=Wage)
rss.cv[k] = cv.glm(Wage, fit, K=10)$delta[1]
}
k.max = 20
rss.cv = rep(0, k.max-1)
for (k in 2:k.max){
fit = glm(wage~cut(age, k), data=Wage)
rss.cv[k] = cv.glm(Wage, fit, K=10)$delta[1]
}
k.max = 10
rss.cv = rep(0, k.max-1)
for (k in 2:k.max){
fit = glm(wage~cut(age, k), data=Wage)
rss.cv[k] = cv.glm(Wage, fit, K=10)$delta[1]
}
k.max = 3
rss.cv = rep(0, k.max-1)
for (k in 2:k.max){
fit = glm(wage~cut(age, k), data=Wage)
rss.cv[k] = cv.glm(Wage, fit, K=10)$delta[1]
}
k = 10
fit = glm(wage~cut(age, k), data=Wage)
fit = glm(wage~cut(age, 2), data=Wage)
fit = glm(wage~cut(age, 3), data=Wage)
fit = glm(wage~cut(age, 4), data=Wage)
fit = glm(wage~cut(age, 5), data=Wage)
fit = glm(wage~cut(age, 60), data=Wage)
fit
k.max = length(unique(Wage$age))-1
rss.cv = rep(0, k.max-1)
for (k in 2:k.max){
fit = glm(wage~cut(age, k), data=Wage)
}
cv.glm(Wage, fit)
cv.glm(Wage, fit, K=10)
fit = glm(wage~cut(age, 20), data=Wage)
cv.glm(Wage, fit, K=10)
cv.glm(Wage, fit, K=5)
cv.glm(Wage, fit, K=3)
fit = glm(wage~cut(age, 10), data=Wage)
cv.glm(Wage, fit, K=10)
cvs <- rep(NA, 10)
for (i in 2:10) {
Wage$age.cut <- cut(Wage$age, i)
fit <- glm(wage ~ age.cut, data = Wage)
cvs[i] <- cv.glm(Wage, fit, K = 10)$delta[1]
}
k.max = length(unique(Wage$age))
rss.cv = rep(0, k.max-1)
for (k in 2:k.max){
Wage$age.cut = cut(Wage$age, k)
fit = glm(wage~age.cut, data=Wage)
rss.cv[k] = cv.glm(Wage, fit, K=10)$delta[1]
}
k.max = length(unique(Wage$age))
rss.cv = rep(0, k.max-1)
for (k in 2:k.max){
print(k)
Wage$age.cut = cut(Wage$age, k)
fit = glm(wage~age.cut, data=Wage)
rss.cv[k] = cv.glm(Wage, fit, K=10)$delta[1]
}
k.max = 30
rss.cv = rep(0, k.max-1)
for (k in 2:k.max){
print(k)
Wage$age.cut = cut(Wage$age, k)
fit = glm(wage~age.cut, data=Wage)
rss.cv[k] = cv.glm(Wage, fit, K=10)$delta[1]
}
10 %/% 3\
10 %/% 3
k.max = uniqe(Wage$age) %/% 2
k.max = length(unique(Wage$age)) %/% 2
k.max = length(unique(Wage$age)) %/% 2
rss.cv = rep(0, k.max-1)
for (k in 2:k.max){
print(k)
Wage$age.cut = cut(Wage$age, k)
fit = glm(wage~age.cut, data=Wage)
rss.cv[k] = cv.glm(Wage, fit, K=10)$delta[1]
}
k.max = length(unique(Wage$age)) %/% 2
rss.cv = rep(0, k.max-1)
for (k in 2:k.max){
Wage$age.cut = cut(Wage$age, k)
fit = glm(wage~age.cut, data=Wage)
rss.cv[k] = cv.glm(Wage, fit, K=10)$delta[1]
}
n.cuts = which.min(rss.cv)
plot(2:k.max, rss.cv, type='l', xlab='Number of cuts', ylab='RSS')
points(n.cuts, rss.cv[n.cuts], col='red', cex=2, pch=20)
length(rss.cv)
k.max
k.max = length(unique(Wage$age)) %/% 2
rss.cv = rep(0, k.max-1)
for (k in 2:k.max){
Wage$age.cut = cut(Wage$age, k)
fit = glm(wage~age.cut, data=Wage)
rss.cv[k] = cv.glm(Wage, fit, K=10)$delta[1]
}
k.max = length(unique(Wage$age)) %/% 2
rss.cv = rep(0, k.max)
for (k in 2:k.max){
Wage$age.cut = cut(Wage$age, k)
fit = glm(wage~age.cut, data=Wage)
rss.cv[k] = cv.glm(Wage, fit, K=10)$delta[1]
}
n.cuts = which.min(rss.cv)
plot(2:k.max, rss.cv[-1], type='l', xlab='Number of cuts', ylab='RSS')
points(n.cuts, rss.cv[n.cuts], col='red', cex=2, pch=20)
n.cuts
n.cuts = which.min(rss.cv[-1])
plot(2:k.max, rss.cv[-1], type='l', xlab='Number of cuts', ylab='RSS')
points(n.cuts, rss.cv[n.cuts], col='red', cex=2, pch=20)
rss.cv[15]
rss.cv[16]
rss.cv[14]
n.cuts = which.min(rss.cv[-1])+1
plot(2:k.max, rss.cv[-1], type='l', xlab='Number of cuts', ylab='RSS')
points(n.cuts, rss.cv[n.cuts], col='red', cex=2, pch=20)
k.max=10
rss.cv = rep(0, k.max)
for (k in 2:k.max){
Wage$age.cut = cut(Wage$age, k)
fit = glm(wage~age.cut, data=Wage)
rss.cv[k] = cv.glm(Wage, fit, K=10)$delta[1]
}
n.cuts = which.min(rss.cv[-1])+1
plot(2:k.max, rss.cv[-1], type='l', xlab='Number of cuts', ylab='RSS')
points(n.cuts, rss.cv[n.cuts], col='red', cex=2, pch=20)
age.range = min(Wage$age):max(Wage$age)
fit = lm(wage~cut(age, 8), data=Wage)
pred = predict(fit, newdata=list(age=age.range), type='response')
age.range = min(Wage$age):max(Wage$age)
fit = lm(wage~cut(age, 8), data=Wage)
pred = predict(fit, newdata=list(age=age.range), type='response')
plot(Wage$age, Wage$wage, col='darkgrey', xlab='Age', ylab='Wage')
lines(age.range, pred, type='l', col='red', lwd=2)
title('Actual vs Prediction: Step Function')
library(ISLR)
attach(Wage)
colnames(Wage)
a = 4; b = 10
range(a, b)
range(c(a, b))
rm(a, b)
library(boot)
Wage$region
a = Wage
View(a)
View(a)
library(gam)
?cv.glm
set.seed(1)
# factor selection step omitted
# use year, region
# --------------------- polynomial regression ---------------------
# cross validation
d.max = 10
cv.rss = rep(0, d.max)
for(d in 1:d.max){
fit = glm(wage~poly(year, d)+region, data=Wage)
cv.rss[d] = cv.glm(Wage, fit, K=10)$delta[1]
}
d.chosen = which.min(cv.rss)
plot(1:d.max, cv.rss, type='l', xlab='Polynomial Degree', ylab='RSS')
points(d.chose, cv.rss[d.chose], col='red', cex=2, pch=20)
fit = glm(wage~poly(year, d)+region, data=Wage)
poly(year, d)
region
I(region)
fit = glm(wage~poly(year, d)+I(region), data=Wage)
View(a)
View(a)
View(a)
d.max = 10
cv.rss = rep(0, d.max)
for(d in 1:d.max){
fit = glm(wage~poly(year, d)+jobclass, data=Wage)
cv.rss[d] = cv.glm(Wage, fit, K=10)$delta[1]
}
d.chosen = which.min(cv.rss)
plot(1:d.max, cv.rss, type='l', xlab='Polynomial Degree', ylab='RSS')
points(d.chose, cv.rss[d.chose], col='red', cex=2, pch=20)
unique(year)
View(a)
d.max = 3
cv.rss = rep(0, d.max)
for(d in 1:d.max){
fit = glm(wage~poly(year, d)+jobclass, data=Wage)
cv.rss[d] = cv.glm(Wage, fit, K=10)$delta[1]
}
d.chosen = which.min(cv.rss)
plot(1:d.max, cv.rss, type='l', xlab='Polynomial Degree', ylab='RSS')
points(d.chose, cv.rss[d.chose], col='red', cex=2, pch=20)
points(d.chose, cv.rss[d.chosen], col='red', cex=2, pch=20)
points(d.chosen, cv.rss[d.chosen], col='red', cex=2, pch=20)
plot(Wage$maritl, Wage$wage)
plot(Wage$jobclass, Wage$wage)
library(gam)
library(ISLR)
attach(Wage)
set.seed(1)
# factor selection step omitted
# use maritl, jobclass
plot(Wage$maritl, Wage$wage)
plot(Wage$jobclass, Wage$wage)
# cross validate year's degree
d.max = 3
rss.cv = rep(0, d.max)
for (d in 1:d.max){
fit = glm(wage~ns(year, knots=d), data=Wage)
rss.cv[d] = cv.glm(Wage, fit, K=10)$delta[1]
}
library(boot)
# cross validate year's degree
d.max = 3
rss.cv = rep(0, d.max)
for (d in 1:d.max){
fit = glm(wage~ns(year, knots=d), data=Wage)
rss.cv[d] = cv.glm(Wage, fit, K=10)$delta[1]
}
warnings()
plot(rss.cv)
?s()
fit.1 = gam(wage~lo(year, span=0.5)+s(age, 5), data=Wage)
fit.2 = gam(wage~lo(year, span=0.5)+s(age, 5)+maritl, data=Wage)
fit.3 = gam(wage~lo(year, span=0.5)+s(age, 5)+jobclass, data=Wage)
fit.4 = gam(wage~lo(year, span=0.5)+s(age, 5)+maritl+jobclass, data=Wage)
fit.1 = gam(wage~lo(year, span=0.5)+s(age, 4), data=Wage)
fit.2 = gam(wage~lo(year, span=0.5)+s(age, 4)+maritl, data=Wage)
fit.3 = gam(wage~lo(year, span=0.5)+s(age, 4)+jobclass, data=Wage)
fit.4 = gam(wage~lo(year, span=0.5)+s(age, 4)+maritl+jobclass, data=Wage)
library(boot)
library(ns)
library(gam)
library(ISLR)
attach(Wage)
set.seed(1)
# factor selection step omitted
# use maritl, jobclass
plot(Wage$maritl, Wage$wage)
plot(Wage$jobclass, Wage$wage)
# include maritl and jobclass in GAM regression
fit.1 = gam(wage~lo(year, span=0.5)+s(age, 4), data=Wage)
fit.2 = gam(wage~lo(year, span=0.5)+s(age, 4)+maritl, data=Wage)
fit.3 = gam(wage~lo(year, span=0.5)+s(age, 4)+jobclass, data=Wage)
fit.4 = gam(wage~lo(year, span=0.5)+s(age, 4)+maritl+jobclass, data=Wage)
library(gam)
library(ISLR)
attach(Wage)
set.seed(1)
# factor selection step omitted
# use maritl, jobclass
plot(Wage$maritl, Wage$wage)
plot(Wage$jobclass, Wage$wage)
# include maritl and jobclass in GAM regression
fit.1 = gam(wage~lo(year, span=0.5)+s(age, 5)+education, data=Wage)
fit.2 = gam(wage~lo(year, span=0.5)+s(age, 5)+education+maritl, data=Wage)
fit.3 = gam(wage~lo(year, span=0.5)+s(age, 5)+education+jobclass, data=Wage)
fit.4 = gam(wage~lo(year, span=0.5)+s(age, 5)+education+maritl+jobclass, data=Wage)
warnings()
fit.1 = gam(wage~lo(year, span=0.7)+s(age, 5)+education, data=Wage)
fit.2 = gam(wage~lo(year, span=0.7)+s(age, 5)+education+maritl, data=Wage)
fit.3 = gam(wage~lo(year, span=0.7)+s(age, 5)+education+jobclass, data=Wage)
fit.4 = gam(wage~lo(year, span=0.7)+s(age, 5)+education+maritl+jobclass, data=Wage)
anova(fit.1, fit.2, fit.3, fit.4)
plot(fit.4, se=T, data=Wage)
fit.4 = gam(wage~lo(year, span=0.7)+s(age, 5)+education+maritl+jobclass, data=Wage)
library(gam)
library(ISLR)
attach(Wage)
set.seed(1)
# factor selection step omitted
# use maritl, jobclass
plot(Wage$maritl, Wage$wage)
plot(Wage$jobclass, Wage$wage)
# include maritl and jobclass in GAM regression
fit.1 = gam(wage~lo(year, span=0.7)+s(age, 5)+education, data=Wage)
fit.2 = gam(wage~lo(year, span=0.7)+s(age, 5)+education+maritl, data=Wage)
fit.3 = gam(wage~lo(year, span=0.7)+s(age, 5)+education+jobclass, data=Wage)
fit.4 = gam(wage~lo(year, span=0.7)+s(age, 5)+education+maritl+jobclass, data=Wage)
anova(fit.1, fit.2, fit.3, fit.4)
plot(fit.4, se=TRUE, col='blue')
